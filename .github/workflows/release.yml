name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: burnin
            asset_name: burnin-linux-amd64
            archive_type: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: burnin
            asset_name: burnin-macos-amd64
            archive_type: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: burnin
            asset_name: burnin-macos-arm64
            archive_type: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: burnin.exe
            asset_name: burnin-windows-amd64
            archive_type: zip
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: burnin.exe
            asset_name: burnin-windows-x86
            archive_type: zip
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Compress binary (tar.gz)
      if: matrix.archive_type == 'tar.gz'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        mv ${{ matrix.asset_name }}.tar.gz ../../../
    
    - name: Compress binary (zip)
      if: matrix.archive_type == 'zip'
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        mv ${{ matrix.asset_name }}.zip ../../../
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}.${{ matrix.archive_type }}

  create-release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display artifacts
      run: ls -la ./artifacts/*/
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ github.ref_name }}" \
          --generate-notes \
          ./artifacts/*/*.tar.gz \
          ./artifacts/*/*.zip
